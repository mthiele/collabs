import java.util.concurrent.TimeUnit

apply plugin: 'java'

println """\
Welcome to Gradle $gradle.gradleVersion - http://www.gradle.org
Gradle home is set to: $gradle.gradleHomeDir
Gradle user directory is set to: $gradle.gradleUserHomeDir

Base directory: $projectDir
Running script ${relativePath(buildFile)}
"""

task buildAll(dependsOn: [':client:npm_run_build', ':server:build'])

task postIt(type: StopVerticle) {
    mustRunAfter ':it'
}

task startJava(type: StartVerticle) {
    def java_home = System.getenv("JAVA_HOME")
    directory "."
    command """$java_home/bin/java -version"""
    ready "VM"
}

task preIt(type: StartVerticle) {
    ready 'Succeeded in deploying verticle'
    finalizedBy postIt
    directory "."
    def java_home = System.getenv("JAVA_HOME")
    command "$java_home/bin/java io.vertx.core.Launcher"
}

task it(dependsOn: ['preIt', ':client:npm_run_e2e']) {

}

// adapted from https://github.com/marc0der/gradle-spawn-plugin
class StartVerticle extends DefaultTask {
    String command
    String ready
    String directory

    static Process process;

    @TaskAction
    def spawnProcess() {
        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        builder.redirectErrorStream(true)
        builder.directory(new File(directory))
        process = builder.start()

        InputStream stdout = process.getInputStream()
        BufferedReader reader = new BufferedReader(new
                InputStreamReader(stdout))
        def String line
        while ((line = reader.readLine()) != null) {
            println line
            if (line.contains(ready)) {
                println "server is ready"
                break;
            }
        }
    }

}

class StopVerticle extends DefaultTask {
    @TaskAction
    def killProcess() {
        while (StartVerticle.process.isAlive()) {
            StartVerticle.process.destroyForcibly();
            StartVerticle.process.waitFor(10, TimeUnit.SECONDS);
        }
    }
}
