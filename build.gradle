import java.util.concurrent.TimeUnit

apply plugin: 'java'

println """\
Welcome to Gradle $gradle.gradleVersion - http://www.gradle.org
Gradle home is set to: $gradle.gradleHomeDir
Gradle user directory is set to: $gradle.gradleUserHomeDir

Base directory: $projectDir
Running script ${relativePath(buildFile)}
"""

task buildAll(dependsOn: [':client:npm_run_build', ':server:build'])

task postIt(type: StopVerticle) {
    mustRunAfter ':it'
}

task unzipDist(type: Copy, dependsOn: ':server:build') {
    from zipTree('server/build/distributions/myserver-3.3.2.zip')
    into 'server/build/distributions'
}

task preIt(type: StartVerticle, dependsOn: ['unzipDist']) {
    ready 'Succeeded in deploying verticle'
    finalizedBy postIt
    directory "server/build/distributions/myserver-3.3.2"
    def java_home = System.getenv("JAVA_HOME")
    command """$java_home/bin/java -classpath "lib/server-3.3.2.jar;lib/vertx-core-3.3.2.jar;lib/vertx-web-3.3.2.jar;lib/netty-common-4.1.1.Final.jar;lib/netty-buffer-4.1.1.Final.jar;lib/netty-transport-4.1.1.Final.jar;lib/netty-handler-4.1.1.Final.jar;lib/netty-handler-proxy-4.1.1.Final.jar;lib/netty-codec-http-4.1.1.Final.jar;lib/netty-codec-http2-4.1.1.Final.jar;lib/netty-resolver-4.1.1.Final.jar;lib/netty-resolver-dns-4.1.1.Final.jar;lib/jackson-core-2.7.4.jar;lib/jackson-databind-2.7.4.jar;lib/vertx-auth-common-3.3.2.jar;lib/netty-codec-4.1.1.Final.jar;lib/netty-codec-socks-4.1.1.Final.jar;lib/netty-codec-dns-4.1.1.Final.jar;lib/jackson-annotations-2.7.0.jar" io.vertx.core.Launcher run io.vertx.example.HelloWorldVerticle"""
}

task it(dependsOn: ['preIt', ':client:npm_run_e2e']) {

}

// adapted from https://github.com/marc0der/gradle-spawn-plugin
class StartVerticle extends DefaultTask {
    String command
    String ready
    String directory

    static Process process;

    @TaskAction
    def spawnProcess() {
        println "execute command: '$command'"
        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        builder.redirectErrorStream(true)
        builder.directory(new File(directory))
        process = builder.start()

        InputStream stdout = process.getInputStream()
        BufferedReader reader = new BufferedReader(new
                InputStreamReader(stdout))
        def String line
        while ((line = reader.readLine()) != null) {
            println line
            if (line.contains(ready)) {
                println "server is ready"
                break;
            }
        }
    }

}

class StopVerticle extends DefaultTask {
    @TaskAction
    def killProcess() {
        while (StartVerticle.process.isAlive()) {
            StartVerticle.process.destroyForcibly();
            StartVerticle.process.waitFor(10, TimeUnit.SECONDS);
        }
    }
}
